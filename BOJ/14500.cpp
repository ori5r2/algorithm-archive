// ⭐️ dfs, 백트래킹으로 풀어보기 !!
#include <bits/stdc++.h>
using namespace std;
#define MX 502

int board[MX][MX];
int maxVal = 0;
int N, M;
int dx[][4] = {
    {0, 1, 2, 3},    // 파란색
    {0, 0, 0, 0},    // 파란색 회전
    {0, 0, 1, 1},    // 노란색
    {0, 0, 0, 1},    // 주황색
    {0, 1, 2, 0},    // 주황색 회전
    {0, 1, 1, 1},    // 주황색 회전
    {0, 0, -1, -2},  // 주황색 회전
    {0, 0, 0, -1},   // 주황색 대칭
    {0, 0, 1, 2},    // 주황색 대칭 회전
    {0, -1, -1, -1}, // 주황색 대칭 회전
    {0, 1, 2, 2},    // 주황색 대칭 회전
    {0, 0, 1, 1},    // 초록색
    {0, -1, -1, -2}, // 초록색 회전
    {0, 0, -1, -1},  // 초록색 대칭
    {0, 1, 1, 2},    // 초록색 대칭 회전
    {0, 1, 2, 1},    // 분홍색
    {0, 0, 0, -1},   // 분홍색 회전
    {0, -1, 0, 1},   // 분홍색 회전
    {0, 0, 0, 1},    // 분홍색 회전
};
int dy[][4] = {
    {0, 0, 0, 0}, // 파란색
    {0, 1, 2, 3}, // 파란색 회전
    {0, 1, 0, 1}, // 노란색
    {0, 1, 2, 2}, // 주황색
    {0, 0, 0, 1}, // 주황색 회전
    {0, 0, 1, 2}, // 주황색 회전
    {0, 1, 1, 1}, // 주황색 회전
    {0, 1, 2, 2}, // 주황색 대칭
    {0, 1, 1, 1}, // 주황색 대칭 회전
    {0, 0, 1, 2}, // 주황색 대칭 회전
    {0, 0, 0, 1}, // 주황색 대칭 회전
    {0, 1, 1, 2}, // 초록색
    {0, 0, 1, 1}, // 초록색 회전
    {0, 1, 1, 2}, // 초록색 대칭
    {0, 0, 1, 1}, // 초록색 대칭 회전
    {0, 0, 0, 1}, // 분홍색
    {0, 1, 2, 1}, // 분홍색 회전
    {0, 1, 1, 1}, // 분홍색 회전
    {0, 1, 2, 1}, // 분홍색 회전
};

void count()
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {

            for (int k = 0; k < 20; k++)
            {
                int tmp = 0;
                bool suc = true;

                for (int d = 0; d < 4; d++)
                {
                    int ny = i + dy[k][d], nx = j + dx[k][d];

                    if (ny < 0 || nx < 0 || ny >= N || nx >= M)
                    {
                        break;
                        suc = false;
                    }
                    tmp += board[ny][nx];
                }

                if (suc)
                {
                    maxVal = max(maxVal, tmp);
                    // if (maxVal < tmp)
                    // {
                    //     cout << i << " " << j << " " << k << " " << tmp << endl;
                    //     maxVal = tmp;
                    // }
                }
            }
        }
    }
}

int main(void)
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    // freopen("../input.txt", "r", stdin);
    cin >> N >> M;
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
            cin >> board[i][j];

    count();
    cout << maxVal;

    return 0;
}